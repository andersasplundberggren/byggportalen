// =============================================================================
// BYGGFLÖDE - Apps Script Backend - DEL 1 av 4
// =============================================================================

// -----------------------------------------------------------------------------
// KONFIGURATION
// -----------------------------------------------------------------------------
var CONFIG = {
  SPREADSHEET_ID: '1T_SXsx3mgvPJIpdQRP3gbfwYRunqkXWgR_I8Dtlq510',
  MAIN_FOLDER_NAME: 'Byggflöde',
  
  SHEETS: {
    ACCOUNTS: 'ACCOUNTS',
    PROJECTS: 'PROJECTS',
    MEMBERS: 'MEMBERS',
    POSTS: 'POSTS',
    REACTIONS: 'REACTIONS',
    COMMENTS: 'COMMENTS',
    SESSIONS: 'SESSIONS',
    OTP: 'OTP',
    IMAGE_METADATA: 'IMAGE_METADATA',
    PROJECT_STEPS: 'PROJECT_STEPS'
  }
};

// -----------------------------------------------------------------------------
// SETUP FUNCTIONS
// -----------------------------------------------------------------------------

function SETUP_addProjectStepsSheet() {
  var ss = getSpreadsheet();
  var sheet = ss.getSheetByName('PROJECT_STEPS');
  if (!sheet) {
    sheet = ss.insertSheet('PROJECT_STEPS');
    sheet.appendRow(['step_id','project_id','step_name','step_order','status','completed_at','created_at']);
    Logger.log('✓ PROJECT_STEPS sheet skapad!');
  } else {
    Logger.log('PROJECT_STEPS finns redan');
  }
}

function SETUP_addStepIdToPosts() {
  var ss = getSpreadsheet();
  var postsSheet = ss.getSheetByName('POSTS');
  if (postsSheet) {
    var headers = postsSheet.getRange(1, 1, 1, postsSheet.getLastColumn()).getValues()[0];
    if (headers.indexOf('step_id') === -1) {
      var lastCol = postsSheet.getLastColumn();
      postsSheet.getRange(1, lastCol + 1).setValue('step_id');
      Logger.log('✓ step_id kolumn tillagd i POSTS!');
    } else {
      Logger.log('step_id finns redan i POSTS');
    }
  }
}

function SETUP_verifyAllSheets() {
  Logger.log('=== VERIFIERAR ALLA SHEETS ===\n');
  var sheets = ['ACCOUNTS','PROJECTS','MEMBERS','POSTS','PROJECT_STEPS','REACTIONS','COMMENTS','SESSIONS','OTP'];
  for (var i = 0; i < sheets.length; i++) {
    var sheetName = sheets[i];
    try {
      var sheet = getSheet(sheetName);
      var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
      Logger.log('✓ ' + sheetName + ':');
      Logger.log('  ' + JSON.stringify(headers));
    } catch (e) {
      Logger.log('✗ ' + sheetName + ': SAKNAS eller FEL');
    }
  }
  Logger.log('\n=== VERIFIERING KLAR ===');
}

// -----------------------------------------------------------------------------
// HJÄLPFUNKTIONER FÖR SHEET-ACCESS
// -----------------------------------------------------------------------------

function getSpreadsheet() {
  return SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID);
}

function getSheet(sheetName) {
  var ss = getSpreadsheet();
  var sheet = ss.getSheetByName(sheetName);
  if (!sheet) {
    throw new Error('Sheet inte hittades: ' + sheetName);
  }
  return sheet;
}

function getSheetData(sheetName) {
  var sheet = getSheet(sheetName);
  var data = sheet.getDataRange().getValues();
  if (data.length === 0) {
    return [];
  }
  var headers = data[0];
  var rows = data.slice(1);
  var result = [];
  for (var i = 0; i < rows.length; i++) {
    var obj = {};
    for (var j = 0; j < headers.length; j++) {
      obj[headers[j]] = rows[i][j];
    }
    result.push(obj);
  }
  return result;
}

function appendToSheet(sheetName, values) {
  var sheet = getSheet(sheetName);
  sheet.appendRow(values);
  return true;
}

function findRowByColumn(sheetName, columnName, value) {
  var data = getSheetData(sheetName);
  for (var i = 0; i < data.length; i++) {
    if (data[i][columnName] === value) {
      return data[i];
    }
  }
  return null;
}

function updateSheetRow(sheetName, columnName, value, updates) {
  try {
    var sheet = getSheet(sheetName);
    var data = sheet.getDataRange().getValues();
    var headers = data[0];
    var columnIndex = headers.indexOf(columnName);
    if (columnIndex === -1) {
      throw new Error('Kolumn hittades inte: ' + columnName);
    }
    for (var i = 1; i < data.length; i++) {
      if (data[i][columnIndex] === value) {
        for (var updateCol in updates) {
          var updateIndex = headers.indexOf(updateCol);
          if (updateIndex !== -1) {
            sheet.getRange(i + 1, updateIndex + 1).setValue(updates[updateCol]);
          }
        }
        return true;
      }
    }
    return false;
  } catch (error) {
    Logger.log('Fel vid uppdatering: ' + error.toString());
    return false;
  }
}

// -----------------------------------------------------------------------------
// DRIVE - MAPPHANTERING
// -----------------------------------------------------------------------------

function getOrCreateFolder(folderName, parentFolder) {
  var folders = parentFolder.getFoldersByName(folderName);
  if (folders.hasNext()) {
    return folders.next();
  } else {
    Logger.log('Skapar mapp: ' + folderName);
    return parentFolder.createFolder(folderName);
  }
}

function sanitizeFolderName(name) {
  return name.replace(/[<>:"/\\|?*]/g, '_').substring(0, 50).replace(/^\s+|\s+$/g, '');
}

function createProjectFolderStructure(projectId, projectName) {
  try {
    Logger.log('Skapar mappstruktur för projekt: ' + projectId);
    var rootFolder = getOrCreateFolder(CONFIG.MAIN_FOLDER_NAME, DriveApp.getRootFolder());
    var projectFolderName = sanitizeFolderName(projectName) + '_' + projectId;
    var projectFolder = getOrCreateFolder(projectFolderName, rootFolder);
    var imagesFolder = getOrCreateFolder('Bilder', projectFolder);
    var documentsFolder = getOrCreateFolder('Dokument', projectFolder);
    var result = {
      projectFolderId: projectFolder.getId(),
      imagesFolderId: imagesFolder.getId(),
      documentsFolderId: documentsFolder.getId(),
      projectFolderUrl: projectFolder.getUrl()
    };
    Logger.log('Mappstruktur skapad: ' + JSON.stringify(result));
    return result;
  } catch (error) {
    Logger.log('Fel vid skapande av mappstruktur: ' + error.toString());
    throw error;
  }
}

function shareProjectFolderWithMember(projectFolderId, memberEmail, isAdmin) {
  try {
    var folder = DriveApp.getFolderById(projectFolderId);
    if (isAdmin) {
      folder.addEditor(memberEmail);
      Logger.log('Gav editor-rättigheter till ' + memberEmail);
    } else {
      folder.addViewer(memberEmail);
      Logger.log('Gav viewer-rättigheter till ' + memberEmail);
    }
    return true;
  } catch (error) {
    Logger.log('Fel vid delning av mapp: ' + error.toString());
    return false;
  }
}

function removeProjectFolderAccess(projectFolderId, memberEmail) {
  try {
    var folder = DriveApp.getFolderById(projectFolderId);
    folder.removeViewer(memberEmail);
    folder.removeEditor(memberEmail);
    Logger.log('Tog bort åtkomst för ' + memberEmail);
    return true;
  } catch (error) {
    Logger.log('Fel vid borttagning av åtkomst: ' + error.toString());
    return false;
  }
}

// -----------------------------------------------------------------------------
// AUTENTISERING
// -----------------------------------------------------------------------------

function generateOTP() {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

function hashOTP(code) {
  return Utilities.base64Encode(Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, code + 'BYGGFLODE_SALT'));
}

function sendOTPEmail(email, code, projectName) {
  try {
    var subject = 'Din inloggningskod till Byggflöde';
    var body = 'Hej!\n\nDin inloggningskod är: ' + code + '\n\nKoden är giltig i 15 minuter.\n\n';
    if (projectName) {
      body += 'Projekt: ' + projectName + '\n\n';
    }
    body += 'Om du inte begärt denna kod kan du ignorera detta meddelande.\n\nMed vänlig hälsning,\nByggflöde';
    MailApp.sendEmail(email, subject, body);
    Logger.log('OTP skickat till: ' + email);
    return true;
  } catch (error) {
    Logger.log('Fel vid skickning av email: ' + error.toString());
    return false;
  }
}

function requestOTP(email, projectId) {
  try {
    var account = findRowByColumn(CONFIG.SHEETS.ACCOUNTS, 'email', email);
    if (!account) {
      return {success: false, error: 'Kontot hittades inte'};
    }
    if (projectId) {
      var member = findMembership(projectId, email);
      if (!member) {
        return {success: false, error: 'Du har inte åtkomst till detta projekt'};
      }
    }
    var code = generateOTP();
    var codeHash = hashOTP(code);
    var sentAt = new Date().toISOString();
    var expiresAt = new Date(Date.now() + 15 * 60 * 1000).toISOString();
    appendToSheet(CONFIG.SHEETS.OTP, [email, projectId || '', codeHash, sentAt, expiresAt, '']);
    var projectName = null;
    if (projectId) {
      var project = findRowByColumn(CONFIG.SHEETS.PROJECTS, 'project_id', projectId);
      if (project) {
        projectName = project.name;
      }
    }
    var emailSent = sendOTPEmail(email, code, projectName);
    if (!emailSent) {
      return {success: false, error: 'Kunde inte skicka email'};
    }
    return {success: true, message: 'OTP-kod skickad till ' + email};
  } catch (error) {
    Logger.log('Fel vid skapande av OTP: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

function verifyOTP(email, code, projectId) {
  try {
    var codeHash = hashOTP(code);
    var otpSheet = getSheet(CONFIG.SHEETS.OTP);
    var data = otpSheet.getDataRange().getValues();
    for (var i = data.length - 1; i >= 1; i--) {
      var row = data[i];
      var rowEmail = row[0];
      var rowProjectId = row[1];
      var rowCodeHash = row[2];
      var rowExpiresAt = row[4];
      var rowUsedAt = row[5];
      if (rowEmail === email && rowCodeHash === codeHash && (projectId === '' || rowProjectId === projectId || rowProjectId === '')) {
        if (rowUsedAt) {
          return {success: false, error: 'Koden har redan använts'};
        }
        var expiresAt = new Date(rowExpiresAt);
        if (expiresAt < new Date()) {
          return {success: false, error: 'Koden har gått ut'};
        }
        otpSheet.getRange(i + 1, 6).setValue(new Date().toISOString());
        var session = createSession(email);
        return {success: true, sessionToken: session.token, email: email, message: 'Inloggning lyckades'};
      }
    }
    return {success: false, error: 'Ogiltig kod'};
  } catch (error) {
    Logger.log('Fel vid verifiering av OTP: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

function createSession(email) {
  var sessionToken = Utilities.getUuid();
  var createdAt = new Date().toISOString();
  var expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString();
  appendToSheet(CONFIG.SHEETS.SESSIONS, [sessionToken, email, expiresAt, createdAt, '', '']);
  Logger.log('Session skapad för: ' + email);
  return {token: sessionToken, email: email, expiresAt: expiresAt};
}

function verifySession(sessionToken) {
  try {
    var session = findRowByColumn(CONFIG.SHEETS.SESSIONS, 'session_token', sessionToken);
    if (!session) {
      return {valid: false, error: 'Session hittades inte'};
    }
    var expiresAt = new Date(session.expires_at);
    if (expiresAt < new Date()) {
      return {valid: false, error: 'Session har gått ut'};
    }
    return {valid: true, email: session.email, expiresAt: session.expires_at};
  } catch (error) {
    Logger.log('Fel vid verifiering av session: ' + error.toString());
    return {valid: false, error: error.toString()};
  }
}

function logout(sessionToken) {
  try {
    var sessionsSheet = getSheet(CONFIG.SHEETS.SESSIONS);
    var data = sessionsSheet.getDataRange().getValues();
    for (var i = 1; i < data.length; i++) {
      if (data[i][0] === sessionToken) {
        sessionsSheet.deleteRow(i + 1);
        Logger.log('Session borttagen');
        return {success: true, message: 'Utloggad'};
      }
    }
    return {success: false, error: 'Session hittades inte'};
  } catch (error) {
    Logger.log('Fel vid utloggning: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

function createAccount(email, name, role) {
  try {
    var existing = findRowByColumn(CONFIG.SHEETS.ACCOUNTS, 'email', email);
    if (existing) {
      return {success: false, error: 'Kontot finns redan'};
    }
    if (role !== 'admin' && role !== 'customer') {
      role = 'customer';
    }
    var accountId = Utilities.getUuid().substring(0, 8);
    var createdAt = new Date().toISOString();
    var status = 'active';
    appendToSheet(CONFIG.SHEETS.ACCOUNTS, [accountId, email, name, role, createdAt, status]);
    Logger.log('Konto skapat: ' + email);
    return {success: true, accountId: accountId, email: email, name: name, role: role};
  } catch (error) {
    Logger.log('Fel vid skapande av konto: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

function findMembership(projectId, email) {
  var members = getSheetData(CONFIG.SHEETS.MEMBERS);
  for (var i = 0; i < members.length; i++) {
    if (members[i].project_id === projectId && members[i].email === email) {
      return members[i];
    }
  }
  return null;
}

function verifyProjectAccess(sessionToken, projectId) {
  var session = verifySession(sessionToken);
  if (!session.valid) {
    return {hasAccess: false, error: 'Ogiltig session'};
  }
  var member = findMembership(projectId, session.email);
  if (!member) {
    return {hasAccess: false, error: 'Du har inte åtkomst till detta projekt'};
  }
  return {hasAccess: true, email: session.email, role: member.role};
}

// DEL 1 SLUT - Fortsätt med DEL 2
// =============================================================================
// BYGGFLÖDE - Apps Script Backend - DEL 2 av 4
// KOPIERA DETTA DIREKT EFTER DEL 1
// =============================================================================

// -----------------------------------------------------------------------------
// PROJEKTHANTERING
// -----------------------------------------------------------------------------

function createProject(name, description, ownerEmail) {
  try {
    var projectId = Utilities.getUuid().substring(0, 8);
    var createdAt = new Date().toISOString();
    Logger.log('Skapar projekt: ' + name + ' (' + projectId + ')');
    var folders = createProjectFolderStructure(projectId, name);
    appendToSheet(CONFIG.SHEETS.PROJECTS, [projectId, name, description, ownerEmail, createdAt, folders.projectFolderId, folders.imagesFolderId, folders.documentsFolderId, 'active', 0]);
    appendToSheet(CONFIG.SHEETS.MEMBERS, [projectId, ownerEmail, 'admin', createdAt, true]);
    shareProjectFolderWithMember(folders.projectFolderId, ownerEmail, true);
    Logger.log('Projekt skapat framgångsrikt!');
    return {success: true, projectId: projectId, folderUrl: folders.projectFolderUrl, message: 'Projekt skapat'};
  } catch (error) {
    Logger.log('Fel vid skapande av projekt: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

function getUserProjects(userEmail) {
  try {
    var members = getSheetData(CONFIG.SHEETS.MEMBERS);
    var userMemberships = [];
    for (var i = 0; i < members.length; i++) {
      if (members[i].email === userEmail) {
        userMemberships.push(members[i]);
      }
    }
    if (userMemberships.length === 0) {
      return {success: true, projects: []};
    }
    var projects = getSheetData(CONFIG.SHEETS.PROJECTS);
    var userProjects = [];
    for (var i = 0; i < projects.length; i++) {
      for (var j = 0; j < userMemberships.length; j++) {
        if (userMemberships[j].project_id === projects[i].project_id) {
          userProjects.push({
            project_id: projects[i].project_id,
            name: projects[i].name,
            description: projects[i].description,
            owner_email: projects[i].owner_email,
            created_at: projects[i].created_at,
            status: projects[i].status,
            completion_percentage: projects[i].completion_percentage,
            userRole: userMemberships[j].role
          });
          break;
        }
      }
    }
    return {success: true, projects: userProjects};
  } catch (error) {
    Logger.log('Fel vid hämtning av projekt: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

function getProject(projectId) {
  try {
    var project = findRowByColumn(CONFIG.SHEETS.PROJECTS, 'project_id', projectId);
    if (!project) {
      return {success: false, error: 'Projekt hittades inte'};
    }
    return {success: true, project: project};
  } catch (error) {
    Logger.log('Fel vid hämtning av projekt: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

function addProjectMember(projectId, memberEmail, role, notifyOnPost) {
  try {
    var project = findRowByColumn(CONFIG.SHEETS.PROJECTS, 'project_id', projectId);
    if (!project) {
      return {success: false, error: 'Projekt hittades inte'};
    }
    var existing = findMembership(projectId, memberEmail);
    if (existing) {
      return {success: false, error: 'Användaren är redan medlem'};
    }
    var account = findRowByColumn(CONFIG.SHEETS.ACCOUNTS, 'email', memberEmail);
    if (!account) {
      return {success: false, error: 'Kontot hittades inte'};
    }
    var addedAt = new Date().toISOString();
    appendToSheet(CONFIG.SHEETS.MEMBERS, [projectId, memberEmail, role, addedAt, notifyOnPost !== false]);
    shareProjectFolderWithMember(project.project_folder_id, memberEmail, role === 'admin');
    Logger.log('Medlem tillagd: ' + memberEmail + ' till projekt ' + projectId);
    return {success: true, message: 'Medlem tillagd', member: {email: memberEmail, role: role, addedAt: addedAt}};
  } catch (error) {
    Logger.log('Fel vid tillägg av medlem: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

// -----------------------------------------------------------------------------
// PROJEKT STEG-HANTERING
// -----------------------------------------------------------------------------

function createProjectStep(projectId, stepName, stepOrder) {
  try {
    var stepId = Utilities.getUuid().substring(0, 8);
    var createdAt = new Date().toISOString();
    appendToSheet(CONFIG.SHEETS.PROJECT_STEPS, [stepId, projectId, stepName, stepOrder, 'pending', '', createdAt]);
    Logger.log('Steg skapat: ' + stepName);
    return {success: true, stepId: stepId, stepName: stepName};
  } catch (error) {
    Logger.log('Fel vid skapande av steg: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

function createProjectWithSteps(name, description, ownerEmail, steps) {
  try {
    var project = createProject(name, description, ownerEmail);
    if (!project.success) {
      return project;
    }
    var createdSteps = [];
    for (var i = 0; i < steps.length; i++) {
      var step = createProjectStep(project.projectId, steps[i], i + 1);
      if (step.success) {
        createdSteps.push(step);
      }
    }
    return {success: true, projectId: project.projectId, folderUrl: project.folderUrl, steps: createdSteps, message: 'Projekt skapat med ' + createdSteps.length + ' steg'};
  } catch (error) {
    Logger.log('Fel vid skapande av projekt med steg: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

function getProjectSteps(projectId) {
  try {
    var steps = getSheetData(CONFIG.SHEETS.PROJECT_STEPS);
    var projectSteps = [];
    for (var i = 0; i < steps.length; i++) {
      if (steps[i].project_id === projectId) {
        projectSteps.push(steps[i]);
      }
    }
    projectSteps.sort(function(a, b) {
      return a.step_order - b.step_order;
    });
    return {success: true, steps: projectSteps, count: projectSteps.length};
  } catch (error) {
    Logger.log('Fel vid hämtning av steg: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

function completeProjectStep(stepId) {
  try {
    var completedAt = new Date().toISOString();
    var updated = updateSheetRow(CONFIG.SHEETS.PROJECT_STEPS, 'step_id', stepId, {status: 'completed', completed_at: completedAt});
    if (updated) {
      var step = findRowByColumn(CONFIG.SHEETS.PROJECT_STEPS, 'step_id', stepId);
      updateProjectCompletion(step.project_id);
      return {success: true, message: 'Steg markerat som klart'};
    }
    return {success: false, error: 'Steg hittades inte'};
  } catch (error) {
    Logger.log('Fel vid markering av steg: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

function updateProjectCompletion(projectId) {
  try {
    var steps = getProjectSteps(projectId);
    if (steps.steps.length === 0) {
      return;
    }
    var completedSteps = 0;
    for (var i = 0; i < steps.steps.length; i++) {
      if (steps.steps[i].status === 'completed') {
        completedSteps++;
      }
    }
    var percentage = Math.round((completedSteps / steps.steps.length) * 100);
    var status = percentage === 100 ? 'completed' : 'in_progress';
    updateSheetRow(CONFIG.SHEETS.PROJECTS, 'project_id', projectId, {completion_percentage: percentage, status: status});
    Logger.log('Projekt uppdaterat: ' + percentage + '% klart');
  } catch (error) {
    Logger.log('Fel vid uppdatering av projektstatus: ' + error.toString());
  }
}

// -----------------------------------------------------------------------------
// POSTS & BILDER
// -----------------------------------------------------------------------------

function createPostForStep(projectId, stepId, authorEmail, text, imageFileIds) {
  try {
    var postId = Utilities.getUuid().substring(0, 8);
    var createdAt = new Date().toISOString();
    var imageFileIdsString = '';
    if (imageFileIds && imageFileIds.length > 0) {
      imageFileIdsString = imageFileIds.join(',');
    }
    appendToSheet(CONFIG.SHEETS.POSTS, [postId, projectId, authorEmail, text, imageFileIdsString, createdAt, stepId]);
    Logger.log('Post skapad för steg: ' + stepId);
    return {success: true, postId: postId, message: 'Inlägg skapat'};
  } catch (error) {
    Logger.log('Fel vid skapande av post: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

function getStepPosts(stepId) {
  try {
    var posts = getSheetData(CONFIG.SHEETS.POSTS);
    var stepPosts = [];
    for (var i = 0; i < posts.length; i++) {
      if (posts[i].step_id === stepId) {
        var post = posts[i];
        if (post.image_file_ids) {
          var imageIds = post.image_file_ids.split(',');
          var images = [];
          for (var j = 0; j < imageIds.length; j++) {
            if (imageIds[j]) {
              var fileId = imageIds[j].trim();
              images.push({
                fileId: fileId,
                thumbnailUrl: 'https://drive.google.com/thumbnail?id=' + fileId + '&sz=w400',
                fullUrl: 'https://drive.google.com/file/d/' + fileId + '/view'
              });
            }
          }
          post.images = images;
        } else {
          post.images = [];
        }
        stepPosts.push(post);
      }
    }
    stepPosts.sort(function(a, b) {
      return new Date(b.created_at) - new Date(a.created_at);
    });
    return {success: true, posts: stepPosts, count: stepPosts.length};
  } catch (error) {
    Logger.log('Fel vid hämtning av posts för steg: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

function getProjectPostsWithImages(projectId) {
  try {
    var posts = getSheetData(CONFIG.SHEETS.POSTS);
    var projectPosts = [];
    for (var i = 0; i < posts.length; i++) {
      if (posts[i].project_id === projectId) {
        var post = posts[i];
        if (post.image_file_ids) {
          var imageIds = post.image_file_ids.split(',');
          var images = [];
          for (var j = 0; j < imageIds.length; j++) {
            if (imageIds[j]) {
              var fileId = imageIds[j].trim();
              images.push({
                fileId: fileId,
                thumbnailUrl: 'https://drive.google.com/thumbnail?id=' + fileId,
                fullUrl: 'https://drive.google.com/file/d/' + fileId + '/view'
              });
            }
          }
          post.images = images;
        } else {
          post.images = [];
        }
        projectPosts.push(post);
      }
    }
    projectPosts.sort(function(a, b) {
      return new Date(b.created_at) - new Date(a.created_at);
    });
    return {success: true, posts: projectPosts, count: projectPosts.length};
  } catch (error) {
    Logger.log('Fel vid hämtning av posts: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

// -----------------------------------------------------------------------------
// REACTIONS & KOMMENTARER
// -----------------------------------------------------------------------------

function addReaction(postId, userEmail, reactionType) {
  try {
    var post = findRowByColumn(CONFIG.SHEETS.POSTS, 'post_id', postId);
    if (!post) {
      return {success: false, error: 'Inlägg hittades inte'};
    }
    var reactions = getSheetData(CONFIG.SHEETS.REACTIONS);
    var existingReaction = null;
    for (var i = 0; i < reactions.length; i++) {
      if (reactions[i].post_id === postId && reactions[i].user_email === userEmail && !reactions[i].deleted_at) {
        existingReaction = reactions[i];
        break;
      }
    }
    if (existingReaction) {
      return {success: false, error: 'Du har redan reagerat på detta inlägg'};
    }
    var createdAt = new Date().toISOString();
    appendToSheet(CONFIG.SHEETS.REACTIONS, [postId, userEmail, reactionType, createdAt, '']);
    Logger.log('Reaction tillagd: ' + reactionType + ' av ' + userEmail);
    return {success: true, message: 'Reaction tillagd', type: reactionType};
  } catch (error) {
    Logger.log('Fel vid tillägg av reaction: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

function removeReaction(postId, userEmail) {
  try {
    var reactionsSheet = getSheet(CONFIG.SHEETS.REACTIONS);
    var data = reactionsSheet.getDataRange().getValues();
    for (var i = 1; i < data.length; i++) {
      if (data[i][0] === postId && data[i][1] === userEmail && !data[i][4]) {
        reactionsSheet.getRange(i + 1, 5).setValue(new Date().toISOString());
        Logger.log('Reaction borttagen från post: ' + postId);
        return {success: true, message: 'Reaction borttagen'};
      }
    }
    return {success: false, error: 'Ingen reaction hittades'};
  } catch (error) {
    Logger.log('Fel vid borttagning av reaction: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

function getPostReactions(postId) {
  try {
    var reactions = getSheetData(CONFIG.SHEETS.REACTIONS);
    var postReactions = [];
    for (var i = 0; i < reactions.length; i++) {
      if (reactions[i].post_id === postId && !reactions[i].deleted_at) {
        postReactions.push({
          userEmail: reactions[i].user_email,
          type: reactions[i].type,
          createdAt: reactions[i].created_at
        });
      }
    }
    var reactionCounts = {};
    for (var i = 0; i < postReactions.length; i++) {
      var type = postReactions[i].type;
      reactionCounts[type] = (reactionCounts[type] || 0) + 1;
    }
    return {success: true, reactions: postReactions, counts: reactionCounts, total: postReactions.length};
  } catch (error) {
    Logger.log('Fel vid hämtning av reactions: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

function addComment(postId, userEmail, text) {
  try {
    var post = findRowByColumn(CONFIG.SHEETS.POSTS, 'post_id', postId);
    if (!post) {
      return {success: false, error: 'Inlägg hittades inte'};
    }
    if (!text || text.trim() === '') {
      return {success: false, error: 'Kommentar kan inte vara tom'};
    }
    var commentId = Utilities.getUuid().substring(0, 8);
    var createdAt = new Date().toISOString();
    appendToSheet(CONFIG.SHEETS.COMMENTS, [commentId, postId, userEmail, text, createdAt]);
    Logger.log('Kommentar tillagd: ' + commentId);
    return {success: true, commentId: commentId, message: 'Kommentar tillagd'};
  } catch (error) {
    Logger.log('Fel vid tillägg av kommentar: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

function getPostComments(postId) {
  try {
    var comments = getSheetData(CONFIG.SHEETS.COMMENTS);
    var postComments = [];
    for (var i = 0; i < comments.length; i++) {
      if (comments[i].post_id === postId) {
        postComments.push({
          commentId: comments[i].comment_id,
          userEmail: comments[i].user_email,
          text: comments[i].text,
          createdAt: comments[i].created_at
        });
      }
    }
    postComments.sort(function(a, b) {
      return new Date(a.createdAt) - new Date(b.createdAt);
    });
    return {success: true, comments: postComments, count: postComments.length};
  } catch (error) {
    Logger.log('Fel vid hämtning av kommentarer: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

// -----------------------------------------------------------------------------
// KONTOHANTERING
// -----------------------------------------------------------------------------

function getAccounts() {
  try {
    var accounts = getSheetData(CONFIG.SHEETS.ACCOUNTS);
    var safeAccounts = [];
    for (var i = 0; i < accounts.length; i++) {
      safeAccounts.push({
        account_id: accounts[i].account_id,
        email: accounts[i].email,
        name: accounts[i].name,
        role: accounts[i].role,
        created_at: accounts[i].created_at,
        status: accounts[i].status
      });
    }
    return {success: true, accounts: safeAccounts, count: safeAccounts.length};
  } catch (error) {
    Logger.log('Fel vid hämtning av konton: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

function updateAccount(email, name, role) {
  try {
    var updates = {};
    if (name) updates.name = name;
    if (role) updates.role = role;
    var updated = updateSheetRow(CONFIG.SHEETS.ACCOUNTS, 'email', email, updates);
    if (updated) {
      return {success: true, message: 'Konto uppdaterat'};
    } else {
      return {success: false, error: 'Konto hittades inte'};
    }
  } catch (error) {
    Logger.log('Fel vid uppdatering av konto: ' + error.toString());
    return {success: false, error: error.toString()};
  }
}

// DEL 2 SLUT - Fortsätt med DEL 3
// =============================================================================
// BYGGFLÖDE - Apps Script Backend - DEL 3 av 4
// KOPIERA DETTA DIREKT EFTER DEL 2
// =============================================================================

// -----------------------------------------------------------------------------
// API ENDPOINTS
// -----------------------------------------------------------------------------

function doGet(e) {
  try {
    var path = e.parameter.path || '';
    var sessionToken = e.parameter.session || '';
    Logger.log('GET request: ' + path);
    
    if (path === 'ping') {
      return jsonResponse({success: true, message: 'Byggflöde API v2.0 with Admin'});
    }
    
    var session = verifySession(sessionToken);
    if (!session.valid) {
      return jsonResponse({success: false, error: 'Ogiltig session'}, 401);
    }
    
    if (path === 'projects') {
      return handleGetProjects(session.email);
    }
    if (path === 'project') {
      var projectId = e.parameter.projectId;
      return handleGetProject(sessionToken, projectId);
    }
    if (path === 'project/steps') {
      var projectId = e.parameter.projectId;
      return handleGetProjectSteps(sessionToken, projectId);
    }
    if (path === 'step/posts') {
      var stepId = e.parameter.stepId;
      return handleGetStepPosts(sessionToken, stepId);
    }
    if (path === 'posts') {
      var projectId = e.parameter.projectId;
      return handleGetPosts(sessionToken, projectId);
    }
    if (path === 'post/reactions') {
      var postId = e.parameter.postId;
      return handleGetReactions(postId);
    }
    if (path === 'post/comments') {
      var postId = e.parameter.postId;
      return handleGetComments(postId);
    }
    if (path === 'accounts') {
      return handleGetAccounts(sessionToken);
    }
    
    return jsonResponse({success: false, error: 'Okänd endpoint'}, 404);
  } catch (error) {
    Logger.log('API Error: ' + error.toString());
    return jsonResponse({success: false, error: error.toString()}, 500);
  }
}

function doPost(e) {
  try {
    var params;
    if (e.postData.type === 'application/json') {
      params = JSON.parse(e.postData.contents);
    } else {
      params = e.parameter;
    }
    var path = params.path || '';
    Logger.log('POST request: ' + path);
    
    if (path === 'auth/request-otp') {
      return handleRequestOTP(params);
    }
    if (path === 'auth/verify-otp') {
      return handleVerifyOTP(params);
    }
    if (path === 'auth/logout') {
      return handleLogout(params);
    }
    
    var sessionToken = params.session || '';
    var session = verifySession(sessionToken);
    if (!session.valid) {
      return jsonResponse({success: false, error: 'Ogiltig session'}, 401);
    }
    
    if (path === 'project/create') {
      return handleCreateProjectWithSteps(session.email, params);
    }
    if (path === 'project/add-member') {
      return handleAddMember(sessionToken, params);
    }
    if (path === 'step/create') {
      return handleCreateStep(sessionToken, params);
    }
    if (path === 'step/complete') {
      return handleCompleteStep(sessionToken, params);
    }
    if (path === 'post/create') {
      return handleCreatePostForStep(sessionToken, params);
    }
    if (path === 'post/reaction/add') {
      return handleAddReaction(sessionToken, params);
    }
    if (path === 'post/reaction/remove') {
      return handleRemoveReaction(sessionToken, params);
    }
    if (path === 'post/comment/add') {
      return handleAddComment(sessionToken, params);
    }
    if (path === 'account/create') {
      return handleCreateAccount(sessionToken, params);
    }
    if (path === 'account/update') {
      return handleUpdateAccount(sessionToken, params);
    }
    
    return jsonResponse({success: false, error: 'Okänd endpoint'}, 404);
  } catch (error) {
    Logger.log('API Error: ' + error.toString());
    return jsonResponse({success: false, error: error.toString()}, 500);
  }
}

function jsonResponse(data, statusCode) {
  statusCode = statusCode || 200;
  var output = JSON.stringify(data);
  return ContentService.createTextOutput(output).setMimeType(ContentService.MimeType.JSON);
}

// -----------------------------------------------------------------------------
// API HANDLERS
// -----------------------------------------------------------------------------

function handleRequestOTP(params) {
  var email = params.email;
  var projectId = params.projectId || '';
  if (!email) {
    return jsonResponse({success: false, error: 'Email saknas'}, 400);
  }
  var result = requestOTP(email, projectId);
  return jsonResponse(result);
}

function handleVerifyOTP(params) {
  var email = params.email;
  var code = params.code;
  var projectId = params.projectId || '';
  if (!email || !code) {
    return jsonResponse({success: false, error: 'Email eller kod saknas'}, 400);
  }
  var result = verifyOTP(email, code, projectId);
  return jsonResponse(result);
}

function handleLogout(params) {
  var sessionToken = params.session;
  if (!sessionToken) {
    return jsonResponse({success: false, error: 'Session token saknas'}, 400);
  }
  var result = logout(sessionToken);
  return jsonResponse(result);
}

function handleGetProjects(email) {
  var result = getUserProjects(email);
  return jsonResponse(result);
}

function handleGetProject(sessionToken, projectId) {
  if (!projectId) {
    return jsonResponse({success: false, error: 'Project ID saknas'}, 400);
  }
  var access = verifyProjectAccess(sessionToken, projectId);
  if (!access.hasAccess) {
    return jsonResponse({success: false, error: access.error}, 403);
  }
  var result = getProject(projectId);
  return jsonResponse(result);
}

function handleCreateProjectWithSteps(email, params) {
  var name = params.name;
  var description = params.description || '';
  var stepsString = params.steps || '';
  if (!name) {
    return jsonResponse({success: false, error: 'Projektnamn saknas'}, 400);
  }
  var steps = [];
  if (stepsString) {
    steps = stepsString.split(',');
  }
  var result = createProjectWithSteps(name, description, email, steps);
  return jsonResponse(result);
}

function handleAddMember(sessionToken, params) {
  var projectId = params.projectId;
  var memberEmail = params.memberEmail;
  var role = params.role || 'customer';
  var notifyOnPost = params.notifyOnPost !== 'false';
  if (!projectId || !memberEmail) {
    return jsonResponse({success: false, error: 'Project ID eller email saknas'}, 400);
  }
  var access = verifyProjectAccess(sessionToken, projectId);
  if (!access.hasAccess) {
    return jsonResponse({success: false, error: access.error}, 403);
  }
  if (access.role !== 'admin') {
    return jsonResponse({success: false, error: 'Endast admins kan lägga till medlemmar'}, 403);
  }
  var result = addProjectMember(projectId, memberEmail, role, notifyOnPost);
  return jsonResponse(result);
}

function handleGetProjectSteps(sessionToken, projectId) {
  if (!projectId) {
    return jsonResponse({success: false, error: 'Project ID saknas'}, 400);
  }
  var access = verifyProjectAccess(sessionToken, projectId);
  if (!access.hasAccess) {
    return jsonResponse({success: false, error: access.error}, 403);
  }
  var result = getProjectSteps(projectId);
  return jsonResponse(result);
}

function handleCreateStep(sessionToken, params) {
  var projectId = params.projectId;
  var stepName = params.stepName;
  var stepOrder = parseInt(params.stepOrder) || 999;
  if (!projectId || !stepName) {
    return jsonResponse({success: false, error: 'Project ID eller steg namn saknas'}, 400);
  }
  var access = verifyProjectAccess(sessionToken, projectId);
  if (!access.hasAccess || access.role !== 'admin') {
    return jsonResponse({success: false, error: 'Endast admins kan skapa steg'}, 403);
  }
  var result = createProjectStep(projectId, stepName, stepOrder);
  return jsonResponse(result);
}

function handleCompleteStep(sessionToken, params) {
  var stepId = params.stepId;
  if (!stepId) {
    return jsonResponse({success: false, error: 'Step ID saknas'}, 400);
  }
  var step = findRowByColumn(CONFIG.SHEETS.PROJECT_STEPS, 'step_id', stepId);
  if (!step) {
    return jsonResponse({success: false, error: 'Steg hittades inte'}, 404);
  }
  var access = verifyProjectAccess(sessionToken, step.project_id);
  if (!access.hasAccess || access.role !== 'admin') {
    return jsonResponse({success: false, error: 'Endast admins kan markera steg som klara'}, 403);
  }
  var result = completeProjectStep(stepId);
  return jsonResponse(result);
}

function handleCreatePostForStep(sessionToken, params) {
  var projectId = params.projectId;
  var stepId = params.stepId;
  var text = params.text || '';
  var imageFileIds = params.imageFileIds || '';
  if (!projectId || !stepId) {
    return jsonResponse({success: false, error: 'Project ID eller Step ID saknas'}, 400);
  }
  var access = verifyProjectAccess(sessionToken, projectId);
  if (!access.hasAccess || access.role !== 'admin') {
    return jsonResponse({success: false, error: 'Endast admins kan skapa inlägg'}, 403);
  }
  var imageIds = [];
  if (imageFileIds) {
    imageIds = imageFileIds.split(',');
  }
  var result = createPostForStep(projectId, stepId, access.email, text, imageIds);
  return jsonResponse(result);
}

function handleGetStepPosts(sessionToken, stepId) {
  if (!stepId) {
    return jsonResponse({success: false, error: 'Step ID saknas'}, 400);
  }
  var step = findRowByColumn(CONFIG.SHEETS.PROJECT_STEPS, 'step_id', stepId);
  if (!step) {
    return jsonResponse({success: false, error: 'Steg hittades inte'}, 404);
  }
  var access = verifyProjectAccess(sessionToken, step.project_id);
  if (!access.hasAccess) {
    return jsonResponse({success: false, error: access.error}, 403);
  }
  var result = getStepPosts(stepId);
  return jsonResponse(result);
}

function handleGetPosts(sessionToken, projectId) {
  if (!projectId) {
    return jsonResponse({success: false, error: 'Project ID saknas'}, 400);
  }
  var access = verifyProjectAccess(sessionToken, projectId);
  if (!access.hasAccess) {
    return jsonResponse({success: false, error: access.error}, 403);
  }
  var result = getProjectPostsWithImages(projectId);
  return jsonResponse(result);
}

function handleAddReaction(sessionToken, params) {
  var postId = params.postId;
  var reactionType = params.type || 'like';
  if (!postId) {
    return jsonResponse({success: false, error: 'Post ID saknas'}, 400);
  }
  var session = verifySession(sessionToken);
  if (!session.valid) {
    return jsonResponse({success: false, error: 'Ogiltig session'}, 401);
  }
  var result = addReaction(postId, session.email, reactionType);
  return jsonResponse(result);
}

function handleRemoveReaction(sessionToken, params) {
  var postId = params.postId;
  if (!postId) {
    return jsonResponse({success: false, error: 'Post ID saknas'}, 400);
  }
  var session = verifySession(sessionToken);
  if (!session.valid) {
    return jsonResponse({success: false, error: 'Ogiltig session'}, 401);
  }
  var result = removeReaction(postId, session.email);
  return jsonResponse(result);
}

function handleAddComment(sessionToken, params) {
  var postId = params.postId;
  var text = params.text || '';
  if (!postId) {
    return jsonResponse({success: false, error: 'Post ID saknas'}, 400);
  }
  if (!text) {
    return jsonResponse({success: false, error: 'Kommentar saknas'}, 400);
  }
  var session = verifySession(sessionToken);
  if (!session.valid) {
    return jsonResponse({success: false, error: 'Ogiltig session'}, 401);
  }
  var result = addComment(postId, session.email, text);
  return jsonResponse(result);
}

function handleGetReactions(postId) {
  if (!postId) {
    return jsonResponse({success: false, error: 'Post ID saknas'}, 400);
  }
  var result = getPostReactions(postId);
  return jsonResponse(result);
}

function handleGetComments(postId) {
  if (!postId) {
    return jsonResponse({success: false, error: 'Post ID saknas'}, 400);
  }
  var result = getPostComments(postId);
  return jsonResponse(result);
}

function handleGetAccounts(sessionToken) {
  var session = verifySession(sessionToken);
  if (!session.valid) {
    return jsonResponse({success: false, error: 'Ogiltig session'}, 401);
  }
  var userAccount = findRowByColumn(CONFIG.SHEETS.ACCOUNTS, 'email', session.email);
  if (!userAccount || userAccount.role !== 'admin') {
    return jsonResponse({success: false, error: 'Endast admins kan lista konton'}, 403);
  }
  var result = getAccounts();
  return jsonResponse(result);
}

function handleCreateAccount(sessionToken, params) {
  var session = verifySession(sessionToken);
  if (!session.valid) {
    return jsonResponse({success: false, error: 'Ogiltig session'}, 401);
  }
  var userAccount = findRowByColumn(CONFIG.SHEETS.ACCOUNTS, 'email', session.email);
  if (!userAccount || userAccount.role !== 'admin') {
    return jsonResponse({success: false, error: 'Endast admins kan skapa konton'}, 403);
  }
  var email = params.email;
  var name = params.name;
  var role = params.role || 'customer';
  if (!email || !name) {
    return jsonResponse({success: false, error: 'Email och namn krävs'}, 400);
  }
  var result = createAccount(email, name, role);
  return jsonResponse(result);
}

function handleUpdateAccount(sessionToken, params) {
  var session = verifySession(sessionToken);
  if (!session.valid) {
    return jsonResponse({success: false, error: 'Ogiltig session'}, 401);
  }
  var userAccount = findRowByColumn(CONFIG.SHEETS.ACCOUNTS, 'email', session.email);
  if (!userAccount || userAccount.role !== 'admin') {
    return jsonResponse({success: false, error: 'Endast admins kan uppdatera konton'}, 403);
  }
  var email = params.email;
  var name = params.name;
  var role = params.role;
  if (!email) {
    return jsonResponse({success: false, error: 'Email krävs'}, 400);
  }
  var result = updateAccount(email, name, role);
  return jsonResponse(result);
}

// DEL 3 SLUT - Fortsätt med DEL 4 (testfunktioner)
// =============================================================================
// BYGGFLÖDE - Apps Script Backend - DEL 4 av 4 (SISTA DELEN)
// KOPIERA DETTA DIREKT EFTER DEL 3
// =============================================================================

// -----------------------------------------------------------------------------
// TESTFUNKTIONER
// -----------------------------------------------------------------------------

function TEST_completeAdminFlow() {
  Logger.log('=== KOMPLETT ADMIN-FLÖDE ===\n');
  var email = 'andersberggren78@hotmail.com';
  
  Logger.log('1. Skapa projekt med steg...');
  var steps = ['Rivning', 'Tätskikt', 'Flytspackling'];
  var project = createProjectWithSteps('Test Admin', 'Test av admin-funktioner', email, steps);
  Logger.log('Projekt ID: ' + project.projectId);
  Logger.log('Steg skapade: ' + project.steps.length);
  
  Logger.log('\n2. Markera första steget som klart...');
  var firstStep = project.steps[0];
  completeProjectStep(firstStep.stepId);
  
  Logger.log('\n3. Skapa inlägg för första steget...');
  var post = createPostForStep(project.projectId, firstStep.stepId, email, 'Rivningen är klar! Allt gammalt är borta.', []);
  Logger.log('Post ID: ' + post.postId);
  
  Logger.log('\n4. Hämta alla steg med status...');
  var allSteps = getProjectSteps(project.projectId);
  for (var i = 0; i < allSteps.steps.length; i++) {
    var step = allSteps.steps[i];
    Logger.log('  ' + step.step_name + ': ' + step.status);
  }
  
  Logger.log('\n=== ADMIN-FLÖDE KLART! ===');
}

function TEST_accountManagement() {
  Logger.log('=== TEST KONTOHANTERING ===\n');
  
  Logger.log('1. Lista alla konton...');
  var accounts = getAccounts();
  Logger.log('Antal konton: ' + accounts.count);
  
  Logger.log('\n2. Skapa testkonto...');
  var newAccount = createAccount('test.kund@example.com', 'Test Kund', 'customer');
  Logger.log(JSON.stringify(newAccount, null, 2));
  
  Logger.log('\n3. Uppdatera konto...');
  var updated = updateAccount('test.kund@example.com', 'Test Kund Uppdaterad', 'customer');
  Logger.log(JSON.stringify(updated, null, 2));
  
  Logger.log('\n=== KONTOHANTERING TESTAD! ===');
}

Logger.log('✓ Byggflöde Backend v2.0 loaded - Full Admin features ready!');
