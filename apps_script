/************************************************************
 * BYGGFLÖDE - Backend v3.2 (admin via SETTINGS, OTP, feed)
 * Kräver: Advanced Drive Service (Drive) aktiverat
 ************************************************************/

var CONFIG = {
  SPREADSHEET_ID: '1T_SXsx3mgvPJIpdQRP3gbfwYRunqkXWgR_I8Dtlq510', // <-- BYT TILL DITT
  MAIN_FOLDER_NAME: 'Byggflöde',
  SHEETS: {
    ACCOUNTS: 'ACCOUNTS',
    PROJECTS: 'PROJECTS',
    MEMBERS: 'MEMBERS',
    POSTS: 'POSTS',
    REACTIONS: 'REACTIONS',
    COMMENTS: 'COMMENTS',
    SESSIONS: 'SESSIONS',
    OTP: 'OTP',
    IMAGE_METADATA: 'IMAGE_METADATA',
    PROJECT_STEPS: 'PROJECT_STEPS',
    SETTINGS: 'SETTINGS'
  }
};

/* =========================
   SETUP / VERIFIERING
   ========================= */

function SETUP_ensureAllSheets() {
  var ss = SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID);

  function ensure(name, headers) {
    var sh = ss.getSheetByName(name);
    if (!sh) {
      sh = ss.insertSheet(name);
      sh.appendRow(headers);
      Logger.log('Skapade sheet: ' + name);
    }
  }

  ensure(CONFIG.SHEETS.ACCOUNTS, ['account_id','email','name','role','created_at','status']);
  ensure(CONFIG.SHEETS.PROJECTS, ['project_id','name','description','owner_email','created_at','project_folder_id','images_folder_id','documents_folder_id','status','completion_percentage']);
  ensure(CONFIG.SHEETS.MEMBERS, ['project_id','email','role','added_at','notify_on_post']);
  ensure(CONFIG.SHEETS.POSTS, ['post_id','project_id','author_email','text','image_file_ids','created_at','status','updated_at','step_id']);
  ensure(CONFIG.SHEETS.PROJECT_STEPS, ['step_id','project_id','step_name','step_order','status','completed_at','created_at']);
  ensure(CONFIG.SHEETS.REACTIONS, ['post_id','user_email','type','created_at','deleted_at']);
  ensure(CONFIG.SHEETS.COMMENTS, ['comment_id','post_id','user_email','text','created_at']);
  ensure(CONFIG.SHEETS.SESSIONS, ['session_token','email','expires_at','created_at','ip_address','user_agent']);
  ensure(CONFIG.SHEETS.OTP, ['email','project_id','code_hash','sent_at','expires_at','used_at']);
  ensure(CONFIG.SHEETS.IMAGE_METADATA, ['file_id','project_id','uploader_email','uploaded_at','mimeType','name','size']);
  // SETTINGS + default
  getSettingsSheet();
  if (!getSetting('ADMIN_USERNAME')) setSetting('ADMIN_USERNAME','admin');
  if (!getSetting('ADMIN_PASSWORD_6')) setSetting('ADMIN_PASSWORD_6','123456');
  if (!getSetting('ADMIN_EMAIL')) setSetting('ADMIN_EMAIL','admin@byggflode.local');

  Logger.log('✓ Setup klart');
}

/* =========================
   GENERELLA HJÄLPARE
   ========================= */

function getSpreadsheet() {
  return SpreadsheetApp.openById(CONFIG.SPREADSHEET_ID);
}

function getSheet(name) {
  var sh = getSpreadsheet().getSheetByName(name);
  if (!sh) throw new Error('SHEET saknas: ' + name);
  return sh;
}

function getSheetData(name) {
  var sh = getSheet(name);
  var data = sh.getDataRange().getValues();
  if (data.length < 2) return [];
  var headers = data[0];
  var rows = data.slice(1);
  return rows.map(function(r){
    var o = {};
    headers.forEach(function(h, i){ o[String(h)] = r[i]; });
    return o;
  });
}

function appendToSheet(name, values) {
  getSheet(name).appendRow(values);
}

function updateSheetRow(name, keyColumn, keyValue, updates) {
  var sh = getSheet(name);
  var data = sh.getDataRange().getValues();
  if (data.length < 2) return false;
  var headers = data[0];
  var keyIdx = headers.indexOf(keyColumn);
  if (keyIdx < 0) throw new Error('Kolumn saknas: ' + keyColumn);

  for (var i=1;i<data.length;i++){
    if (String(data[i][keyIdx]) === String(keyValue)) {
      Object.keys(updates).forEach(function(col){
        var idx = headers.indexOf(col);
        if (idx >= 0) sh.getRange(i+1, idx+1).setValue(updates[col]);
      });
      return true;
    }
  }
  return false;
}

function findRowByColumn(name, col, val) {
  var rows = getSheetData(name);
  for (var i=0;i<rows.length;i++){
    if (String(rows[i][col]) === String(val)) return rows[i];
  }
  return null;
}

/* =========================
   SETTINGS (admin inlogg)
   ========================= */

function getSettingsSheet() {
  var ss = getSpreadsheet();
  var sh = ss.getSheetByName(CONFIG.SHEETS.SETTINGS);
  if (!sh) {
    sh = ss.insertSheet(CONFIG.SHEETS.SETTINGS);
    sh.appendRow(['key','value']);
  }
  return sh;
}

function getSetting(key) {
  var sh = getSettingsSheet();
  var data = sh.getDataRange().getValues();
  for (var i=1;i<data.length;i++){
    if (String(data[i][0]).trim() === key) return data[i][1] || '';
  }
  return '';
}

function setSetting(key, value) {
  var sh = getSettingsSheet();
  var data = sh.getDataRange().getValues();
  for (var i=1;i<data.length;i++){
    if (String(data[i][0]).trim() === key) {
      sh.getRange(i+1, 2).setValue(value);
      return true;
    }
  }
  sh.appendRow([key, value]);
  return true;
}

/* =========================
   DRIVE / MAPPAR / BILDER
   ========================= */

function sanitizeFolderName(name) {
  return String(name).replace(/[<>:"/\\|?*]/g,'_').substring(0,50).trim();
}

function getOrCreateFolder(folderName, parentFolder) {
  var it = parentFolder.getFoldersByName(folderName);
  return it.hasNext() ? it.next() : parentFolder.createFolder(folderName);
}

function createProjectFolderStructure(projectId, projectName) {
  var root = getOrCreateFolder(CONFIG.MAIN_FOLDER_NAME, DriveApp.getRootFolder());
  var projectFolder = getOrCreateFolder(sanitizeFolderName(projectName) + '_' + projectId, root);
  var imagesFolder = getOrCreateFolder('Bilder', projectFolder);
  var documentsFolder = getOrCreateFolder('Dokument', projectFolder);
  return {
    projectFolderId: projectFolder.getId(),
    imagesFolderId: imagesFolder.getId(),
    documentsFolderId: documentsFolder.getId(),
    projectFolderUrl: projectFolder.getUrl()
  };
}

// Tyst delning (utan mail) – kräver Advanced Drive Service
function silentShareFolder(projectFolderId, memberEmail, isEditor) {
  try {
    var perm = {
      'role': isEditor ? 'writer' : 'reader',
      'type': 'user',
      'emailAddress': memberEmail
    };
    // sendNotificationEmails=false -> inget Google-mail
    Drive.Permissions.insert(perm, projectFolderId, {sendNotificationEmails: false});
    return true;
  } catch (e) {
    Logger.log('silentShareFolder fel: ' + e);
    return false;
  }
}

function removeProjectFolderAccess(projectFolderId, memberEmail) {
  try {
    var perms = Drive.Permissions.list(projectFolderId).items || [];
    for (var i=0;i<perms.length;i++){
      if (perms[i].emailAddress === memberEmail) {
        Drive.Permissions.delete(projectFolderId, perms[i].id);
      }
    }
    return true;
  } catch (e) {
    Logger.log('Fel vid borttagning av åtkomst: ' + e);
    return false;
  }
}

// Direkt-URL och thumb från fileId
function makeDirectUrl(fileId) {
  return 'https://drive.google.com/uc?export=view&id=' + encodeURIComponent(fileId);
}
function makeThumbUrl(fileId, w) {
  var width = w || 800;
  return 'https://drive.google.com/thumbnail?id=' + encodeURIComponent(fileId) + '&sz=w' + width;
}

/* =========================
   AUTENTISERING (OTP / ADMIN)
   ========================= */

function generateOTP() {
  return Math.floor(100000 + Math.random() * 900000).toString();
}
function hashOTP(code) {
  return Utilities.base64Encode(
    Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, code + 'BYGGFLODE_SALT')
  );
}

function sendOTPEmail(email, code, projectName) {
  var subject = 'Din inloggningskod till Byggflöde';
  var body = 'Hej!\n\nDin inloggningskod är: ' + code + '\n\nKoden är giltig i 15 minuter.\n\n';
  if (projectName) body += 'Projekt: ' + projectName + '\n\n';
  body += 'Om du inte begärt denna kod kan du ignorera detta meddelande.\n\nMed vänlig hälsning,\nByggflöde';
  MailApp.sendEmail(email, subject, body);
  return true;
}

function createSession(email) {
  var token = Utilities.getUuid();
  var createdAt = new Date().toISOString();
  var expiresAt = new Date(Date.now() + 7*24*60*60*1000).toISOString();
  appendToSheet(CONFIG.SHEETS.SESSIONS, [token, email, expiresAt, createdAt, '', '']);
  return { token: token, email: email, expiresAt: expiresAt };
}

function verifySession(sessionToken) {
  var s = findRowByColumn(CONFIG.SHEETS.SESSIONS, 'session_token', sessionToken);
  if (!s) return { valid: false, error: 'Session saknas' };
  if (new Date(s.expires_at) < new Date()) return { valid: false, error: 'Session har gått ut' };
  return { valid: true, email: s.email, expiresAt: s.expires_at };
}

function requestOTP(email, projectId) {
  var acc = findRowByColumn(CONFIG.SHEETS.ACCOUNTS, 'email', email);
  if (!acc) return { success: false, error: 'Kontot hittades inte' };
  if (projectId) {
    var mem = findMembership(projectId, email);
    if (!mem) return { success: false, error: 'Du har inte åtkomst till detta projekt' };
  }
  var code = generateOTP();
  var codeHash = hashOTP(code);
  var sentAt = new Date().toISOString();
  var expiresAt = new Date(Date.now()+15*60*1000).toISOString();
  appendToSheet(CONFIG.SHEETS.OTP, [email, projectId || '', codeHash, sentAt, expiresAt, '']);

  var projectName = '';
  if (projectId) {
    var p = findRowByColumn(CONFIG.SHEETS.PROJECTS, 'project_id', projectId);
    if (p) projectName = p.name;
  }
  sendOTPEmail(email, code, projectName);
  return { success: true, message: 'OTP skickad' };
}

function verifyOTP(email, code, projectId) {
  var codeHash = hashOTP(code);
  var sh = getSheet(CONFIG.SHEETS.OTP);
  var data = sh.getDataRange().getValues();
  for (var i=data.length-1; i>=1; i--) {
    var row = data[i];
    var rowEmail = row[0], rowProjectId = row[1], rowCodeHash = row[2], rowExpiresAt = row[4], rowUsedAt = row[5];
    if (rowEmail === email && rowCodeHash === codeHash && (!projectId || rowProjectId === projectId || rowProjectId === '')) {
      if (rowUsedAt) return { success:false, error:'Koden är redan använd' };
      if (new Date(rowExpiresAt) < new Date()) return { success:false, error:'Koden har gått ut' };
      sh.getRange(i+1, 6).setValue(new Date().toISOString());
      var session = createSession(email);
      return { success:true, sessionToken: session.token, email: email };
    }
  }
  return { success:false, error:'Ogiltig kod' };
}

// Admin-login mot SETTINGS (statiskt 6-siffrigt lösen)
function handleAdminLogin(params) {
  var username = (params.username || '').toString().trim();
  var password = (params.password || '').toString().trim(); // 6 siffror

  var expectedUser = getSetting('ADMIN_USERNAME') || 'admin';
  var expectedPass = getSetting('ADMIN_PASSWORD_6') || '';
  var adminEmail   = getSetting('ADMIN_EMAIL') || 'admin@byggflode.local';

  if (username !== expectedUser || password !== expectedPass) {
    return jsonResponse({ success: false, error: 'Fel användarnamn eller lösenord' }, 401);
  }
  var session = createSession(adminEmail);
  return jsonResponse({ success:true, sessionToken: session.token, email: adminEmail, message:'Admin inloggad' });
}

function handleMe(sessionToken) {
  var s = verifySession(sessionToken);
  if (!s.valid) return jsonResponse({ success:false, error:s.error }, 401);
  var email = s.email;
  var adminEmail = getSetting('ADMIN_EMAIL') || 'admin@byggflode.local';
  if (email === adminEmail) return jsonResponse({ success:true, email:email, role:'admin' });

  var acc = findRowByColumn(CONFIG.SHEETS.ACCOUNTS, 'email', email);
  var role = acc ? (acc.role || 'customer') : 'customer';
  return jsonResponse({ success:true, email:email, role:role });
}

/* =========================
   KONTON / MEDLEMSKAP
   ========================= */

function createAccount(email, name, role) {
  var existing = findRowByColumn(CONFIG.SHEETS.ACCOUNTS, 'email', email);
  if (existing) return { success:false, error:'Kontot finns redan' };
  if (role !== 'admin' && role !== 'customer') role = 'customer';
  var id = Utilities.getUuid().substring(0,8);
  appendToSheet(CONFIG.SHEETS.ACCOUNTS, [id, email, name, role, new Date().toISOString(), 'active']);
  return { success:true, accountId:id };
}

function findMembership(projectId, email) {
  var rows = getSheetData(CONFIG.SHEETS.MEMBERS);
  for (var i=0;i<rows.length;i++){
    if (String(rows[i].project_id) === String(projectId) && String(rows[i].email) === String(email)) {
      return rows[i];
    }
  }
  return null;
}

/* =========================
   PROJEKT / STEG
   ========================= */

function createProject(name, description, ownerEmail) {
  var pid = Utilities.getUuid().substring(0,8);
  var folders = createProjectFolderStructure(pid, name);
  appendToSheet(CONFIG.SHEETS.PROJECTS, [
    pid, name, description, ownerEmail, new Date().toISOString(),
    folders.projectFolderId, folders.imagesFolderId, folders.documentsFolderId,
    'active', 0
  ]);
  appendToSheet(CONFIG.SHEETS.MEMBERS, [pid, ownerEmail, 'admin', new Date().toISOString(), true]);
  // Admin/ägare får redigera – utan mail
  silentShareFolder(folders.projectFolderId, ownerEmail, true);
  return { success:true, projectId: pid, folderUrl: folders.projectFolderUrl };
}

function createProjectStep(projectId, stepName, stepOrder) {
  var sid = Utilities.getUuid().substring(0,8);
  appendToSheet(CONFIG.SHEETS.PROJECT_STEPS, [sid, projectId, stepName, stepOrder, 'pending', '', new Date().toISOString()]);
  return { success:true, stepId:sid };
}

function createProjectWithSteps(name, description, ownerEmail, steps) {
  var p = createProject(name, description, ownerEmail);
  if (!p.success) return p;
  var created = [];
  for (var i=0;i<steps.length;i++){
    var s = createProjectStep(p.projectId, steps[i], i+1);
    if (s.success) created.push(s);
  }
  return { success:true, projectId:p.projectId, steps:created, folderUrl:p.folderUrl };
}

function getUserProjects(userEmail) {
  var members = getSheetData(CONFIG.SHEETS.MEMBERS).filter(function(m){ return m.email === userEmail; });
  if (members.length===0) return { success:true, projects:[] };

  var projects = getSheetData(CONFIG.SHEETS.PROJECTS);
  var list = [];
  for (var i=0;i<projects.length;i++){
    for (var j=0;j<members.length;j++){
      if (members[j].project_id === projects[i].project_id) {
        list.push({
          project_id: projects[i].project_id,
          name: projects[i].name,
          description: projects[i].description,
          owner_email: projects[i].owner_email,
          created_at: projects[i].created_at,
          status: projects[i].status,
          completion_percentage: projects[i].completion_percentage,
          userRole: members[j].role
        });
        break;
      }
    }
  }
  return { success:true, projects:list };
}

function getProjectSteps(projectId) {
  var steps = getSheetData(CONFIG.SHEETS.PROJECT_STEPS)
    .filter(function(s){ return s.project_id === projectId; })
    .sort(function(a,b){ return Number(a.step_order) - Number(b.step_order); });
  return { success:true, steps:steps };
}

function completeProjectStep(stepId) {
  var ok = updateSheetRow(CONFIG.SHEETS.PROJECT_STEPS, 'step_id', stepId,
      { status:'completed', completed_at: new Date().toISOString() });
  if (!ok) return { success:false, error:'Steg hittades inte' };

  // uppdatera projektets completion %
  var step = findRowByColumn(CONFIG.SHEETS.PROJECT_STEPS, 'step_id', stepId);
  if (step) updateProjectCompletion(step.project_id);

  return { success:true };
}

function updateProjectCompletion(projectId) {
  var stepsResp = getProjectSteps(projectId);
  var steps = stepsResp.steps || [];
  if (steps.length === 0) return;
  var completed = steps.filter(function(s){ return s.status === 'completed'; }).length;
  var pct = Math.round((completed/steps.length)*100);
  var status = pct === 100 ? 'completed' : 'in_progress';
  updateSheetRow(CONFIG.SHEETS.PROJECTS, 'project_id', projectId, { completion_percentage:pct, status:status });
}

/* =========================
   INLÄGG / BILDER / KOMMENTAR / REAKTIONER
   ========================= */

function createPostForStep(projectId, stepId, authorEmail, text, imageFileIds) {
  var pid = Utilities.getUuid().substring(0,8);
  var createdAt = new Date().toISOString();
  var imageIdsString = (imageFileIds && imageFileIds.length) ? imageFileIds.join(',') : '';
  appendToSheet(CONFIG.SHEETS.POSTS, [pid, projectId, authorEmail, text, imageIdsString, createdAt, 'active', '', stepId]);
  return { success:true, postId:pid };
}

function getStepPosts(stepId) {
  var posts = getSheetData(CONFIG.SHEETS.POSTS)
    .filter(function(p){ return p.step_id === stepId; })
    .sort(function(a,b){ return new Date(b.created_at) - new Date(a.created_at); });

  posts.forEach(function(p){
    p.images = [];
    if (p.image_file_ids) {
      (String(p.image_file_ids).split(',')||[]).forEach(function(fid){
        var id = String(fid).trim();
        if (id) p.images.push({
          fileId: id,
          directUrl: makeDirectUrl(id),
          thumbnailUrl: makeThumbUrl(id, 800),
          fullUrl: 'https://drive.google.com/file/d/' + id + '/view'
        });
      });
    }
  });

  return { success:true, posts:posts, count:posts.length };
}

function getProjectPostsWithImages(projectId) {
  var posts = getSheetData(CONFIG.SHEETS.POSTS)
    .filter(function(p){ return p.project_id === projectId; })
    .sort(function(a,b){ return new Date(b.created_at) - new Date(a.created_at); });

  posts.forEach(function(p){
    p.images = [];
    if (p.image_file_ids) {
      (String(p.image_file_ids).split(',')||[]).forEach(function(fid){
        var id = String(fid).trim();
        if (id) p.images.push({
          fileId: id,
          directUrl: makeDirectUrl(id),
          thumbnailUrl: makeThumbUrl(id, 800),
          fullUrl: 'https://drive.google.com/file/d/' + id + '/view'
        });
      });
    }
  });

  return { success:true, posts:posts, count:posts.length };
}

function addReaction(postId, userEmail, reactionType) {
  var ex = getSheetData(CONFIG.SHEETS.REACTIONS).find(function(r){
    return r.post_id === postId && r.user_email === userEmail && !r.deleted_at;
  });
  if (ex) return { success:false, error:'Du har redan reagerat' };
  appendToSheet(CONFIG.SHEETS.REACTIONS, [postId, userEmail, (reactionType||'like'), new Date().toISOString(), '' ]);
  return { success:true };
}
function removeReaction(postId, userEmail) {
  var sh = getSheet(CONFIG.SHEETS.REACTIONS);
  var data = sh.getDataRange().getValues();
  for (var i=1;i<data.length;i++){
    if (data[i][0]===postId && data[i][1]===userEmail && !data[i][4]) {
      sh.getRange(i+1, 5).setValue(new Date().toISOString());
      return { success:true };
    }
  }
  return { success:false, error:'Ingen reaction att ta bort' };
}
function getPostReactions(postId) {
  var rows = getSheetData(CONFIG.SHEETS.REACTIONS).filter(function(r){
    return r.post_id === postId && !r.deleted_at;
  });
  var counts = {};
  rows.forEach(function(r){ counts[r.type] = (counts[r.type]||0) + 1; });
  return { success:true, reactions: rows.map(function(r){ return { userEmail:r.user_email, type:r.type, createdAt:r.created_at }; }), counts:counts, total: rows.length };
}

function addComment(postId, userEmail, text) {
  if (!String(text||'').trim()) return { success:false, error:'Tom kommentar' };
  var cid = Utilities.getUuid().substring(0,8);
  appendToSheet(CONFIG.SHEETS.COMMENTS, [cid, postId, userEmail, text, new Date().toISOString()]);
  return { success:true, commentId:cid };
}
function getPostComments(postId) {
  var rows = getSheetData(CONFIG.SHEETS.COMMENTS).filter(function(c){ return c.post_id === postId; });
  rows.sort(function(a,b){ return new Date(a.created_at) - new Date(b.created_at); });
  return { success:true, comments:rows, count:rows.length };
}

/* =========================
   AGGREGAT: STEG MED RÄKNARE & PROJEKTFEED
   ========================= */

function getStepsWithCounts(projectId) {
  var steps = getProjectSteps(projectId).steps || [];
  var posts = getProjectPostsWithImages(projectId).posts || [];

  // count per step
  var byStep = {};
  steps.forEach(function(s){
    byStep[s.step_id] = { post:0, images:0 };
  });

  posts.forEach(function(p){
    var sid = p.step_id;
    if (sid && byStep[sid]) {
      byStep[sid].post += 1;
      byStep[sid].images += (p.images ? p.images.length : 0);
    }
  });

  steps.forEach(function(s){
    s.post_count = (byStep[s.step_id] && byStep[s.step_id].post) || 0;
    s.image_count = (byStep[s.step_id] && byStep[s.step_id].images) || 0;
  });

  return { success:true, steps:steps };
}

function getProjectFeed(projectId) {
  var posts = getProjectPostsWithImages(projectId).posts || [];
  var stepsMap = {};
  (getProjectSteps(projectId).steps || []).forEach(function(s){ stepsMap[s.step_id] = s.step_name; });

  // kommentarsräknare per post
  var allComments = getSheetData(CONFIG.SHEETS.COMMENTS);
  var commCount = {};
  allComments.forEach(function(c){
    var pid = c.post_id;
    commCount[pid] = (commCount[pid]||0)+1;
  });

  posts = posts.map(function(p){
    p.step_name = stepsMap[p.step_id] || '';
    p.comments_count = commCount[p.post_id] || 0;
    return p;
  });

  // sort redan gjord i getProjectPostsWithImages
  return { success:true, feed:posts };
}

/* =========================
   FIL-UPPLADDNING
   ========================= */

function uploadImageToProject(projectId, uploaderEmail, base64, filename, mimeType) {
  var project = findRowByColumn(CONFIG.SHEETS.PROJECTS, 'project_id', projectId);
  if (!project) return { success:false, error:'Projekt saknas' };

  var blob = Utilities.newBlob(Utilities.base64Decode(base64), mimeType || 'application/octet-stream', filename || ('bild_'+Date.now()));
  var folder = DriveApp.getFolderById(project.images_folder_id);
  var file = folder.createFile(blob);

  appendToSheet(CONFIG.SHEETS.IMAGE_METADATA, [
    file.getId(), projectId, uploaderEmail, new Date().toISOString(),
    mimeType || '', file.getName(), file.getSize()
  ]);

  return { success:true, fileId:file.getId(), directUrl: makeDirectUrl(file.getId()), thumbUrl: makeThumbUrl(file.getId(), 800) };
}

/* =========================
   HTTP API
   ========================= */

function jsonResponse(data, statusCode) {
  // Apps Script Web Apps ignorerar status-koden i ContentService, men vi behåller signaturen.
  return ContentService.createTextOutput(JSON.stringify(data)).setMimeType(ContentService.MimeType.JSON);
}

function doGet(e) {
  try {
    var path = e.parameter.path || '';
    if (path === 'ping') return jsonResponse({ success:true, message:'pong' });

    if (path === 'me') {
      var sessionToken = e.parameter.session || '';
      return handleMe(sessionToken);
    }

    var session = verifySession(e.parameter.session || '');
    if (!session.valid) return jsonResponse({ success:false, error:'Ogiltig session' });

    if (path === 'projects') {
      return jsonResponse(getUserProjects(session.email));
    }
    if (path === 'project/steps-with-counts') {
      var projectId = e.parameter.projectId;
      if (!projectId) return jsonResponse({ success:false, error:'projectId saknas' }, 400);
      // Åtkomstkontroll
      var mem = findMembership(projectId, session.email);
      var adminEmail = getSetting('ADMIN_EMAIL') || 'admin@byggflode.local';
      if (!mem && session.email !== adminEmail) return jsonResponse({ success:false, error:'Ingen åtkomst' }, 403);
      return jsonResponse(getStepsWithCounts(projectId));
    }
    if (path === 'project/feed') {
      var projectId2 = e.parameter.projectId;
      if (!projectId2) return jsonResponse({ success:false, error:'projectId saknas' }, 400);
      var mem2 = findMembership(projectId2, session.email);
      var adminEmail2 = getSetting('ADMIN_EMAIL') || 'admin@byggflode.local';
      if (!mem2 && session.email !== adminEmail2) return jsonResponse({ success:false, error:'Ingen åtkomst' }, 403);
      return jsonResponse(getProjectFeed(projectId2));
    }
    if (path === 'post/comments') {
      var postId = e.parameter.postId;
      if (!postId) return jsonResponse({ success:false, error:'postId saknas' }, 400);
      return jsonResponse(getPostComments(postId));
    }
    if (path === 'post/reactions') {
      var postId2 = e.parameter.postId;
      if (!postId2) return jsonResponse({ success:false, error:'postId saknas' }, 400);
      return jsonResponse(getPostReactions(postId2));
    }

    return jsonResponse({ success:false, error:'Okänd GET endpoint' }, 404);
  } catch (err) {
    Logger.log('doGet error: ' + err);
    return jsonResponse({ success:false, error:String(err) }, 500);
  }
}

function doPost(e) {
  try {
    var params = (e.postData && e.postData.type === 'application/json')
      ? JSON.parse(e.postData.contents) : (e.parameter || {});
    var path = params.path || '';

    // Öppna endpoints (ingen session)
    if (path === 'auth/request-otp') return jsonResponse(requestOTP(params.email, params.projectId||''));
    if (path === 'auth/verify-otp') return jsonResponse(verifyOTP(params.email, params.code, params.projectId||''));
    if (path === 'auth/admin-login') return handleAdminLogin(params);

    // session krävs
    var session = verifySession(params.session || '');
    if (!session.valid) return jsonResponse({ success:false, error:'Ogiltig session' }, 401);

    // Auth
    if (path === 'auth/logout') {
      // Enkel logout = ta bort sessionrad
      var sh = getSheet(CONFIG.SHEETS.SESSIONS);
      var data = sh.getDataRange().getValues();
      for (var i=1;i<data.length;i++){
        if (data[i][0] === params.session) { sh.deleteRow(i+1); break; }
      }
      return jsonResponse({ success:true, message:'Utloggad' });
    }

    // Projekt
    if (path === 'project/create') {
      // Endast admin eller projektägare (admin räcker)
      var me = handleMe(params.session); // ContentService-output
      var meObj = JSON.parse(me.getContent());
      if (meObj.role !== 'admin') return jsonResponse({ success:false, error:'Endast admin' }, 403);
      var steps = (params.steps||'').split(',').map(function(s){ return s.trim(); }).filter(Boolean);
      var resp = createProjectWithSteps(params.name, (params.description||''), session.email, steps);
      return jsonResponse(resp);
    }

    if (path === 'project/add-member') {
      var projectId = params.projectId;
      var memberEmail = params.memberEmail;
      var role = params.role || 'customer';
      var notifyOnPost = (String(params.notifyOnPost) !== 'false');

      if (!projectId || !memberEmail) return jsonResponse({ success:false, error:'ProjectId och email krävs' }, 400);

      // Endast admin (enkel regel)
      var me2 = handleMe(params.session);
      var me2Obj = JSON.parse(me2.getContent());
      if (me2Obj.role !== 'admin') return jsonResponse({ success:false, error:'Endast admin' }, 403);

      var project = findRowByColumn(CONFIG.SHEETS.PROJECTS, 'project_id', projectId);
      if (!project) return jsonResponse({ success:false, error:'Projekt saknas' }, 404);

      var memberExist = findMembership(projectId, memberEmail);
      if (memberExist) return jsonResponse({ success:false, error:'Användaren är redan medlem' }, 400);

      var acc = findRowByColumn(CONFIG.SHEETS.ACCOUNTS, 'email', memberEmail);
      if (!acc) return jsonResponse({ success:false, error:'Kontot saknas, skapa först' }, 400);

      appendToSheet(CONFIG.SHEETS.MEMBERS, [projectId, memberEmail, role, new Date().toISOString(), notifyOnPost]);
      // tyst delning
      try { silentShareFolder(project.project_folder_id, memberEmail, role === 'admin'); } catch(e){}

      return jsonResponse({ success:true, message:'Medlem tillagd' });
    }

    // Steg
    if (path === 'step/complete') {
      var stepId = params.stepId;
      if (!stepId) return jsonResponse({ success:false, error:'stepId saknas' }, 400);
      // Endast admin
      var me3 = handleMe(params.session); var me3Obj = JSON.parse(me3.getContent());
      if (me3Obj.role !== 'admin') return jsonResponse({ success:false, error:'Endast admin' }, 403);
      return jsonResponse(completeProjectStep(stepId));
    }

    // Inlägg
    if (path === 'post/create') {
      var projectId2 = params.projectId, stepId2 = params.stepId, text = params.text || '';
      if (!projectId2 || !stepId2) return jsonResponse({ success:false, error:'ProjectId/StepId saknas' }, 400);
      var me4 = handleMe(params.session); var me4Obj = JSON.parse(me4.getContent());
      if (me4Obj.role !== 'admin') return jsonResponse({ success:false, error:'Endast admin' }, 403);
      var imageIds = (params.imageFileIds||'').split(',').map(function(x){return x.trim();}).filter(Boolean);
      return jsonResponse(createPostForStep(projectId2, stepId2, session.email, text, imageIds));
    }

    if (path === 'post/comment/add') {
      var postId3 = params.postId, text2 = params.text || '';
      if (!postId3) return jsonResponse({ success:false, error:'postId saknas' }, 400);
      return jsonResponse(addComment(postId3, session.email, text2));
    }

    if (path === 'post/reaction/add') {
      var postId4 = params.postId, t = params.type || 'like';
      if (!postId4) return jsonResponse({ success:false, error:'postId saknas' }, 400);
      return jsonResponse(addReaction(postId4, session.email, t));
    }
    if (path === 'post/reaction/remove') {
      var postId5 = params.postId;
      if (!postId5) return jsonResponse({ success:false, error:'postId saknas' }, 400);
      return jsonResponse(removeReaction(postId5, session.email));
    }

    // Konto
    if (path === 'account/create') {
      var me5 = handleMe(params.session); var me5Obj = JSON.parse(me5.getContent());
      if (me5Obj.role !== 'admin') return jsonResponse({ success:false, error:'Endast admin' }, 403);
      return jsonResponse(createAccount(params.email, params.name, params.role||'customer'));
    }

    // Uppladdning
    if (path === 'file/upload') {
      var projectId3 = params.projectId;
      var base64 = params.dataBase64;
      var filename = params.filename || ('bild_'+Date.now()+'.jpg');
      var mimeType = params.mimeType || 'image/jpeg';
      if (!projectId3 || !base64) return jsonResponse({ success:false, error:'projectId/dataBase64 saknas' }, 400);
      // Endast admin (skapar inlägg/laddar upp)
      var me6 = handleMe(params.session); var me6Obj = JSON.parse(me6.getContent());
      if (me6Obj.role !== 'admin') return jsonResponse({ success:false, error:'Endast admin' }, 403);
      return jsonResponse(uploadImageToProject(projectId3, session.email, base64, filename, mimeType));
    }

    return jsonResponse({ success:false, error:'Okänd POST endpoint' }, 404);
  } catch (err) {
    Logger.log('doPost error: ' + err);
    return jsonResponse({ success:false, error:String(err) }, 500);
  }
}

/* =========================
   LOGG VID LADDA IN
   ========================= */
(function(){
  try {
    Logger.log('✓ Byggflöde Backend v3.2 laddad');
  } catch(e) {}
})();
